{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ADMIN\\\\Desktop\\\\my-chrome-extension\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport axios from 'axios';\nimport './App.css'; // Assuming you have your CSS styles in App.css\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  const [messages, setMessages] = useState([]);\n  const chatContainerRef = useRef(null);\n  const reminderSound = useRef(new Audio('/path/to/sound.mp3'));\n  const handleSendMessage = async e => {\n    e.preventDefault();\n    const newMessage = e.target.message.value;\n    if (newMessage.trim() !== '') {\n      // Add user message to state for immediate UI update\n      const userMessage = {\n        text: newMessage,\n        sender: 'user'\n      };\n      setMessages([...messages, userMessage]);\n      try {\n        // Send message to backend\n        const response = await axios.post('http://localhost:8080/send-message', {\n          message: newMessage\n        });\n\n        // Add bot response to state after receiving response from backend\n        const botMessage = {\n          text: response.data.message,\n          sender: 'assistant'\n        };\n        setMessages(prevMessages => [...prevMessages, botMessage]);\n\n        // Check if the response is for opening a site\n        if (response.data.message.startsWith('Opening')) {\n          const siteUrl = response.data.message.substring(8).trim();\n          window.open(siteUrl, '_blank');\n        }\n\n        // Handle reminders\n        if (response.data.message.startsWith('Reminder set:')) {\n          const reminderMessage = response.data.message.substring(14).trim();\n          setReminder(reminderMessage);\n        }\n      } catch (error) {\n        console.error('Error sending message:', error);\n      }\n\n      // Clear input field after sending message\n      e.target.message.value = '';\n    }\n  };\n\n  // Function to handle setting reminders\n  const setReminder = reminderMessage => {\n    const reminderParts = reminderMessage.split(' at ');\n    if (reminderParts.length === 2) {\n      const [task, time] = reminderParts;\n      const reminderTime = new Date();\n      const [hours, minutes, period] = time.match(/(\\d+):(\\d+)\\s*(am|pm)/i).slice(1);\n      reminderTime.setHours(period.toLowerCase() === 'pm' ? parseInt(hours, 10) + 12 : hours);\n      reminderTime.setMinutes(minutes);\n      const now = new Date();\n      const timeout = reminderTime - now;\n      if (timeout > 0) {\n        setTimeout(() => {\n          alert(`Reminder: ${task}`);\n          reminderSound.current.play();\n        }, timeout);\n      } else {\n        console.log('The specified time has already passed.');\n      }\n    } else if (reminderMessage.includes('every')) {\n      const [task, interval] = reminderMessage.split(' every ');\n      const intervalMinutes = parseInt(interval, 10);\n      if (!isNaN(intervalMinutes)) {\n        setInterval(() => {\n          alert(`Reminder: ${task}`);\n          reminderSound.current.play();\n        }, intervalMinutes * 60 * 1000);\n      }\n    } else {\n      console.error('Invalid reminder format');\n    }\n  };\n  useEffect(() => {\n    if (chatContainerRef.current) {\n      chatContainerRef.current.scrollTop = chatContainerRef.current.scrollHeight;\n    }\n  }, [messages]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Chrome Extension Chatbot\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-container\",\n      ref: chatContainerRef,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat-messages\",\n        children: messages.map((message, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `message ${message.sender}`,\n          children: message.text\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: handleSendMessage,\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          name: \"message\",\n          className: \"message-input\",\n          placeholder: \"Type your message...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          className: \"send-button\",\n          children: \"Send\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 92,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"i9L1ILHbN1ZeLm87y5S4swcpDyI=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","useRef","axios","jsxDEV","_jsxDEV","App","_s","messages","setMessages","chatContainerRef","reminderSound","Audio","handleSendMessage","e","preventDefault","newMessage","target","message","value","trim","userMessage","text","sender","response","post","botMessage","data","prevMessages","startsWith","siteUrl","substring","window","open","reminderMessage","setReminder","error","console","reminderParts","split","length","task","time","reminderTime","Date","hours","minutes","period","match","slice","setHours","toLowerCase","parseInt","setMinutes","now","timeout","setTimeout","alert","current","play","log","includes","interval","intervalMinutes","isNaN","setInterval","scrollTop","scrollHeight","className","children","fileName","_jsxFileName","lineNumber","columnNumber","ref","map","index","onSubmit","type","name","placeholder","_c","$RefreshReg$"],"sources":["C:/Users/ADMIN/Desktop/my-chrome-extension/src/App.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport axios from 'axios';\nimport './App.css'; // Assuming you have your CSS styles in App.css\n\nconst App = () => {\n  const [messages, setMessages] = useState([]);\n  const chatContainerRef = useRef(null);\n  const reminderSound = useRef(new Audio('/path/to/sound.mp3'));\n\n  const handleSendMessage = async (e) => {\n    e.preventDefault();\n    const newMessage = e.target.message.value;\n    if (newMessage.trim() !== '') {\n      // Add user message to state for immediate UI update\n      const userMessage = { text: newMessage, sender: 'user' };\n      setMessages([...messages, userMessage]);\n\n      try {\n        // Send message to backend\n        const response = await axios.post('http://localhost:8080/send-message', {\n          message: newMessage\n        });\n\n        // Add bot response to state after receiving response from backend\n        const botMessage = { text: response.data.message, sender: 'assistant' };\n        setMessages(prevMessages => [...prevMessages, botMessage]);\n\n        // Check if the response is for opening a site\n        if (response.data.message.startsWith('Opening')) {\n          const siteUrl = response.data.message.substring(8).trim();\n          window.open(siteUrl, '_blank');\n        }\n\n        // Handle reminders\n        if (response.data.message.startsWith('Reminder set:')) {\n          const reminderMessage = response.data.message.substring(14).trim();\n          setReminder(reminderMessage);\n        }\n\n      } catch (error) {\n        console.error('Error sending message:', error);\n      }\n\n      // Clear input field after sending message\n      e.target.message.value = '';\n    }\n  };\n\n  // Function to handle setting reminders\n  const setReminder = (reminderMessage) => {\n    const reminderParts = reminderMessage.split(' at ');\n    if (reminderParts.length === 2) {\n      const [task, time] = reminderParts;\n      const reminderTime = new Date();\n      const [hours, minutes, period] = time.match(/(\\d+):(\\d+)\\s*(am|pm)/i).slice(1);\n      reminderTime.setHours(period.toLowerCase() === 'pm' ? parseInt(hours, 10) + 12 : hours);\n      reminderTime.setMinutes(minutes);\n      \n      const now = new Date();\n      const timeout = reminderTime - now;\n\n      if (timeout > 0) {\n        setTimeout(() => {\n          alert(`Reminder: ${task}`);\n          reminderSound.current.play();\n        }, timeout);\n      } else {\n        console.log('The specified time has already passed.');\n      }\n    } else if (reminderMessage.includes('every')) {\n      const [task, interval] = reminderMessage.split(' every ');\n      const intervalMinutes = parseInt(interval, 10);\n\n      if (!isNaN(intervalMinutes)) {\n        setInterval(() => {\n          alert(`Reminder: ${task}`);\n          reminderSound.current.play();\n        }, intervalMinutes * 60 * 1000);\n      }\n    } else {\n      console.error('Invalid reminder format');\n    }\n  };\n\n  useEffect(() => {\n    if (chatContainerRef.current) {\n      chatContainerRef.current.scrollTop = chatContainerRef.current.scrollHeight;\n    }\n  }, [messages]);\n\n  return (\n    <div className=\"App\">\n      <h1>Chrome Extension Chatbot</h1>\n      <div className=\"chat-container\" ref={chatContainerRef}>\n        <div className=\"chat-messages\">\n          {messages.map((message, index) => (\n            <div key={index} className={`message ${message.sender}`}>\n              {message.text}\n            </div>\n          ))}\n        </div>\n        <form onSubmit={handleSendMessage}>\n          <input type=\"text\" name=\"message\" className=\"message-input\" placeholder=\"Type your message...\" />\n          <button type=\"submit\" className=\"send-button\">Send</button>\n        </form>\n      </div>\n    </div>\n  );\n};\n\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}