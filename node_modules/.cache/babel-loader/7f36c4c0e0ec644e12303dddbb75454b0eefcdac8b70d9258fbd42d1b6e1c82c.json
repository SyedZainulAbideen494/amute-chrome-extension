{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ADMIN\\\\Desktop\\\\my-chrome-extension\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport axios from 'axios';\nimport './App.css'; // Assuming you have your CSS styles in App.css\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  const [messages, setMessages] = useState([]);\n  const [reminders, setReminders] = useState([]);\n  const chatContainerRef = useRef(null);\n  const timerRef = useRef(null); // Ref to manage timer\n\n  // Function to handle sending messages and setting reminders\n  const handleSendMessage = async e => {\n    e.preventDefault();\n    const newMessage = e.target.message.value;\n    if (newMessage.trim() !== '') {\n      // Add user message to state for immediate UI update\n      const userMessage = {\n        text: newMessage,\n        sender: 'user'\n      };\n      setMessages([...messages, userMessage]);\n\n      // Check if the message is a reminder request\n      if (newMessage.toLowerCase().includes('remind me to')) {\n        const reminderText = newMessage.substring(12).trim(); // Remove 'remind me to' from the start\n        setReminders([...reminders, {\n          text: reminderText\n        }]);\n      }\n\n      // Clear input field after sending message\n      e.target.message.value = '';\n    }\n  };\n\n  // Effect to handle reminders\n  useEffect(() => {\n    // Clear existing interval if any\n    if (timerRef.current) {\n      clearInterval(timerRef.current);\n    }\n\n    // Set up interval to check reminders every minute\n    timerRef.current = setInterval(() => {\n      const now = new Date();\n      const currentMinute = now.getMinutes();\n\n      // Check if any reminder matches the current minute\n      reminders.forEach((reminder, index) => {\n        if (reminder.time === currentMinute) {\n          // Add reminder message to state for UI update\n          const botMessage = {\n            text: `Reminder: ${reminder.text}`,\n            sender: 'assistant'\n          };\n          setMessages([...messages, botMessage]);\n\n          // Remove the reminder after displaying it\n          setReminders(prevReminders => prevReminders.filter((_, i) => i !== index));\n        }\n      });\n    }, 60000); // Check every minute\n\n    // Clean up interval on component unmount\n    return () => {\n      clearInterval(timerRef.current);\n    };\n  }, [reminders]); // Run effect whenever reminders change\n\n  // Function to parse user input and set reminders\n  const parseReminder = message => {\n    const lowerCaseMessage = message.toLowerCase().trim();\n\n    // Check if the message contains a request for a reminder\n    if (lowerCaseMessage.startsWith('remind me to ')) {\n      const reminderText = lowerCaseMessage.substring(13).trim(); // Remove 'remind me to ' from the start\n      const timeIndex = lowerCaseMessage.lastIndexOf(' every ');\n      let time = null;\n      if (timeIndex !== -1) {\n        time = parseInt(lowerCaseMessage.substring(timeIndex + 7)); // Extract time in minutes\n      }\n      if (!isNaN(time)) {\n        return {\n          text: reminderText,\n          time: time\n        };\n      }\n    }\n    return null;\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Chrome Extension Chatbot\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-container\",\n      ref: chatContainerRef,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat-messages\",\n        children: messages.map((message, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `message ${message.sender}`,\n          children: message.text\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: handleSendMessage,\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          name: \"message\",\n          className: \"message-input\",\n          placeholder: \"Type your message...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          className: \"send-button\",\n          children: \"Send\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 85,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"D1LjdhgCJCjkbc+y82qpI87MpxA=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","useRef","axios","jsxDEV","_jsxDEV","App","_s","messages","setMessages","reminders","setReminders","chatContainerRef","timerRef","handleSendMessage","e","preventDefault","newMessage","target","message","value","trim","userMessage","text","sender","toLowerCase","includes","reminderText","substring","current","clearInterval","setInterval","now","Date","currentMinute","getMinutes","forEach","reminder","index","time","botMessage","prevReminders","filter","_","i","parseReminder","lowerCaseMessage","startsWith","timeIndex","lastIndexOf","parseInt","isNaN","className","children","fileName","_jsxFileName","lineNumber","columnNumber","ref","map","onSubmit","type","name","placeholder","_c","$RefreshReg$"],"sources":["C:/Users/ADMIN/Desktop/my-chrome-extension/src/App.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport axios from 'axios';\nimport './App.css'; // Assuming you have your CSS styles in App.css\n\nconst App = () => {\n  const [messages, setMessages] = useState([]);\n  const [reminders, setReminders] = useState([]);\n  const chatContainerRef = useRef(null);\n  const timerRef = useRef(null); // Ref to manage timer\n\n  // Function to handle sending messages and setting reminders\n  const handleSendMessage = async (e) => {\n    e.preventDefault();\n    const newMessage = e.target.message.value;\n    if (newMessage.trim() !== '') {\n      // Add user message to state for immediate UI update\n      const userMessage = { text: newMessage, sender: 'user' };\n      setMessages([...messages, userMessage]);\n\n      // Check if the message is a reminder request\n      if (newMessage.toLowerCase().includes('remind me to')) {\n        const reminderText = newMessage.substring(12).trim(); // Remove 'remind me to' from the start\n        setReminders([...reminders, { text: reminderText }]);\n      }\n\n      // Clear input field after sending message\n      e.target.message.value = '';\n    }\n  };\n\n  // Effect to handle reminders\n  useEffect(() => {\n    // Clear existing interval if any\n    if (timerRef.current) {\n      clearInterval(timerRef.current);\n    }\n\n    // Set up interval to check reminders every minute\n    timerRef.current = setInterval(() => {\n      const now = new Date();\n      const currentMinute = now.getMinutes();\n\n      // Check if any reminder matches the current minute\n      reminders.forEach((reminder, index) => {\n        if (reminder.time === currentMinute) {\n          // Add reminder message to state for UI update\n          const botMessage = { text: `Reminder: ${reminder.text}`, sender: 'assistant' };\n          setMessages([...messages, botMessage]);\n\n          // Remove the reminder after displaying it\n          setReminders((prevReminders) => prevReminders.filter((_, i) => i !== index));\n        }\n      });\n    }, 60000); // Check every minute\n\n    // Clean up interval on component unmount\n    return () => {\n      clearInterval(timerRef.current);\n    };\n  }, [reminders]); // Run effect whenever reminders change\n\n  // Function to parse user input and set reminders\n  const parseReminder = (message) => {\n    const lowerCaseMessage = message.toLowerCase().trim();\n\n    // Check if the message contains a request for a reminder\n    if (lowerCaseMessage.startsWith('remind me to ')) {\n      const reminderText = lowerCaseMessage.substring(13).trim(); // Remove 'remind me to ' from the start\n      const timeIndex = lowerCaseMessage.lastIndexOf(' every ');\n      let time = null;\n\n      if (timeIndex !== -1) {\n        time = parseInt(lowerCaseMessage.substring(timeIndex + 7)); // Extract time in minutes\n      }\n\n      if (!isNaN(time)) {\n        return { text: reminderText, time: time };\n      }\n    }\n\n    return null;\n  };\n\n  return (\n    <div className=\"App\">\n      <h1>Chrome Extension Chatbot</h1>\n      <div className=\"chat-container\" ref={chatContainerRef}>\n        <div className=\"chat-messages\">\n          {messages.map((message, index) => (\n            <div key={index} className={`message ${message.sender}`}>\n              {message.text}\n            </div>\n          ))}\n        </div>\n        <form onSubmit={handleSendMessage}>\n          <input type=\"text\" name=\"message\" className=\"message-input\" placeholder=\"Type your message...\" />\n          <button type=\"submit\" className=\"send-button\">Send</button>\n        </form>\n      </div>\n    </div>\n  );\n};\n\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}