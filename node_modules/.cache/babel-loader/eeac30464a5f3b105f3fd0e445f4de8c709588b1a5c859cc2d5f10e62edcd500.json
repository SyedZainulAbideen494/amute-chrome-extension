{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ADMIN\\\\Desktop\\\\my-chrome-extension\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport axios from 'axios';\nimport './App.css'; // Assuming you have your CSS styles in App.css\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  const [messages, setMessages] = useState([]);\n  const chatContainerRef = useRef(null);\n  const reminderSound = useRef(new Audio('/hotle.mp3'));\n  const reminderIntervals = useRef([]);\n  const handleSendMessage = async e => {\n    e.preventDefault();\n    const newMessage = e.target.message.value;\n    if (newMessage.trim() !== '') {\n      const userMessage = {\n        text: newMessage,\n        sender: 'user'\n      };\n      setMessages([...messages, userMessage]);\n      try {\n        const response = await axios.post('http://localhost:8080/send-message', {\n          message: newMessage\n        });\n        const botMessage = {\n          text: response.data.message,\n          sender: 'assistant'\n        };\n        setMessages(prevMessages => [...prevMessages, botMessage]);\n        if (response.data.message.startsWith('Opening')) {\n          const siteUrl = response.data.message.substring(8).trim();\n          window.open(siteUrl, '_blank');\n        }\n        if (response.data.message.startsWith('Reminder set:')) {\n          const reminderMessage = response.data.message.substring(14).trim();\n          setReminder(reminderMessage);\n        }\n        if (response.data.message === 'All reminders stopped.') {\n          stopAllReminders();\n        }\n      } catch (error) {\n        console.error('Error sending message:', error);\n      }\n      e.target.message.value = '';\n    }\n  };\n  const setReminder = reminderMessage => {\n    if (reminderMessage.includes('every')) {\n      const [task, interval] = reminderMessage.split(' every ');\n      const intervalMinutes = parseInt(interval, 10);\n      if (!isNaN(intervalMinutes)) {\n        const intervalId = setInterval(() => {\n          alert(`Reminder: ${task}`);\n          reminderSound.current.play();\n        }, intervalMinutes * 60 * 1000);\n        reminderIntervals.current.push(intervalId);\n      }\n    } else {\n      const [task, time] = reminderMessage.split(' at ');\n      const now = new Date();\n      const reminderTime = new Date(now.toDateString() + ' ' + time);\n      if (reminderTime < now) {\n        reminderTime.setDate(reminderTime.getDate() + 1);\n      }\n      const timeout = reminderTime - now;\n      setTimeout(() => {\n        alert(`Reminder: ${task}`);\n        reminderSound.current.play();\n      }, timeout);\n    }\n  };\n  const stopAllReminders = () => {\n    reminderIntervals.current.forEach(intervalId => clearInterval(intervalId));\n    reminderIntervals.current = [];\n  };\n  useEffect(() => {\n    if (chatContainerRef.current) {\n      chatContainerRef.current.scrollTop = chatContainerRef.current.scrollHeight;\n    }\n  }, [messages]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Chrome Extension Chatbot\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-container\",\n      ref: chatContainerRef,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat-messages\",\n        children: messages.map((message, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `message ${message.sender}`,\n          children: message.text\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: handleSendMessage,\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          name: \"message\",\n          className: \"message-input\",\n          placeholder: \"Type your message...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          className: \"send-button\",\n          children: \"Send\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 90,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"xWQshJexupwu5SQtPk0bUyAxdek=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","useRef","axios","jsxDEV","_jsxDEV","App","_s","messages","setMessages","chatContainerRef","reminderSound","Audio","reminderIntervals","handleSendMessage","e","preventDefault","newMessage","target","message","value","trim","userMessage","text","sender","response","post","botMessage","data","prevMessages","startsWith","siteUrl","substring","window","open","reminderMessage","setReminder","stopAllReminders","error","console","includes","task","interval","split","intervalMinutes","parseInt","isNaN","intervalId","setInterval","alert","current","play","push","time","now","Date","reminderTime","toDateString","setDate","getDate","timeout","setTimeout","forEach","clearInterval","scrollTop","scrollHeight","className","children","fileName","_jsxFileName","lineNumber","columnNumber","ref","map","index","onSubmit","type","name","placeholder","_c","$RefreshReg$"],"sources":["C:/Users/ADMIN/Desktop/my-chrome-extension/src/App.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport axios from 'axios';\nimport './App.css'; // Assuming you have your CSS styles in App.css\n\nconst App = () => {\n  const [messages, setMessages] = useState([]);\n  const chatContainerRef = useRef(null);\n  const reminderSound = useRef(new Audio('/hotle.mp3'));\n  const reminderIntervals = useRef([]);\n\n  const handleSendMessage = async (e) => {\n    e.preventDefault();\n    const newMessage = e.target.message.value;\n    if (newMessage.trim() !== '') {\n      const userMessage = { text: newMessage, sender: 'user' };\n      setMessages([...messages, userMessage]);\n\n      try {\n        const response = await axios.post('http://localhost:8080/send-message', {\n          message: newMessage\n        });\n\n        const botMessage = { text: response.data.message, sender: 'assistant' };\n        setMessages(prevMessages => [...prevMessages, botMessage]);\n\n        if (response.data.message.startsWith('Opening')) {\n          const siteUrl = response.data.message.substring(8).trim();\n          window.open(siteUrl, '_blank');\n        }\n\n        if (response.data.message.startsWith('Reminder set:')) {\n          const reminderMessage = response.data.message.substring(14).trim();\n          setReminder(reminderMessage);\n        }\n\n        if (response.data.message === 'All reminders stopped.') {\n          stopAllReminders();\n        }\n\n      } catch (error) {\n        console.error('Error sending message:', error);\n      }\n\n      e.target.message.value = '';\n    }\n  };\n\n  const setReminder = (reminderMessage) => {\n    if (reminderMessage.includes('every')) {\n      const [task, interval] = reminderMessage.split(' every ');\n      const intervalMinutes = parseInt(interval, 10);\n\n      if (!isNaN(intervalMinutes)) {\n        const intervalId = setInterval(() => {\n          alert(`Reminder: ${task}`);\n          reminderSound.current.play();\n        }, intervalMinutes * 60 * 1000);\n        reminderIntervals.current.push(intervalId);\n      }\n    } else {\n      const [task, time] = reminderMessage.split(' at ');\n      const now = new Date();\n      const reminderTime = new Date(now.toDateString() + ' ' + time);\n\n      if (reminderTime < now) {\n        reminderTime.setDate(reminderTime.getDate() + 1);\n      }\n\n      const timeout = reminderTime - now;\n\n      setTimeout(() => {\n        alert(`Reminder: ${task}`);\n        reminderSound.current.play();\n      }, timeout);\n    }\n  };\n\n  const stopAllReminders = () => {\n    reminderIntervals.current.forEach(intervalId => clearInterval(intervalId));\n    reminderIntervals.current = [];\n  };\n\n  useEffect(() => {\n    if (chatContainerRef.current) {\n      chatContainerRef.current.scrollTop = chatContainerRef.current.scrollHeight;\n    }\n  }, [messages]);\n\n  return (\n    <div className=\"App\">\n      <h1>Chrome Extension Chatbot</h1>\n      <div className=\"chat-container\" ref={chatContainerRef}>\n        <div className=\"chat-messages\">\n          {messages.map((message, index) => (\n            <div key={index} className={`message ${message.sender}`}>\n              {message.text}\n            </div>\n          ))}\n        </div>\n        <form onSubmit={handleSendMessage}>\n          <input type=\"text\" name=\"message\" className=\"message-input\" placeholder=\"Type your message...\" />\n          <button type=\"submit\" className=\"send-button\">Send</button>\n        </form>\n      </div>\n    </div>\n  );\n};\n\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}